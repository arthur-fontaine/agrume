---
import { getPages } from "../utils/get-pages.js";
import DocSearchbar from "./searchbar/DocSearchbar.astro";

import LucideMenu from "~icons/lucide/menu";
import LucideX from "~icons/lucide/x";

const pages = getPages().map((page) => {
  return {
    ...page,
    subpages: page.content
      .filter((subpage) => subpage.tagName.toUpperCase() === "H2")
      .map((subpage) => {
        return {
          id: subpage.id,
          title: subpage.textContent,
        };
      }),
  };
});
---

<nav>
  <div class="nav-toggle-wrapper">
    <input type="checkbox" id="nav-toggle" />
    <label for="nav-toggle">
      <div class="open">
        <LucideMenu />
      </div>
      <div class="close">
        <LucideX />
      </div>
    </label>
  </div>

  <DocSearchbar />
  <div>
    {
      pages.map((page) => {
        return (
          <div
            class="page"
            data-active={
              new RegExp(`^/docs/${page.id}/?`).test(
                Astro.url.pathname
              ) || Astro.url.pathname === `/` && page.id === `getting-started`
            }
          >
            <a href={`/docs/${page.id}`}>{page.title}</a>
            {page.subpages.length > 0 && (
              <div class="subpages">
                {page.subpages.map((subpage) => {
                  return (
                    <a href={`/docs/${page.id}#${subpage.id}`}>
                      {subpage.title}
                    </a>
                  );
                })}
              </div>
            )}
          </div>
        );
      })
    }
  </div>
</nav>

<script>
  const nav = document.querySelector("nav") as HTMLElement | null;
  const navToggle = document.querySelector("#nav-toggle") as HTMLInputElement | null;

  window.addEventListener("click", (event) => {
    if (nav === null) return;
    if (navToggle === null) return;
    if (event.target === null) return;

    if (getComputedStyle(nav).position !== "fixed") return;

    // If clicking outside the nav, close it
    if (!nav.contains(event.target as Node)) {
      navToggle.checked = false;
    }
  });
</script>

<style lang="scss">
  @import "../styles/variables.scss";

  :global(html:has(#nav-toggle:checked)) {
    overflow: hidden;
  }

  .nav-toggle-wrapper {
    display: none;

    // When the nav is open
    &:has(#nav-toggle:checked) {
      label {
        div.open {
          display: none;
        }
      }

      @media screen and (max-width: 375px) {
        position: static;
        width: fit-content;

        margin-bottom: 2rem;
        margin-left: auto;

        transform: none;
      }
    }

    // When the nav is closed
    &:not(:has(#nav-toggle:checked)) {
      label {
        div.close {
          display: none;
        }
      }
    }
  }

  @media screen and (max-width: 768px) {
    nav {
      position: fixed;
      top: 0;
      left: 0;
      bottom: 0;
      right: 0;

      z-index: 9999;

      height: 100dvh;
      width: fit-content;

      background-color: inherit;

      transform: translateX(-100%);
      transition: transform 0.2s ease-in-out;

      &:has(#nav-toggle:checked) {
        transform: translateX(0);
        outline: 99999px solid rgba(desaturate($foreground, 80%), 0.5);
      }
    }

    .nav-toggle-wrapper {
      display: block;
      cursor: pointer;
      z-index: 1000;
      position: absolute;

      // Put the toggle below the header
      top: calc(5rem + 1px + 1rem);
      right: -1rem;

      transform: translateX(100%);

      border: 1px solid darken($background, 1%);
      border-radius: 0.5rem;
      padding: 0.5rem;

      background-color: lighten($background, 12%);
    }

    [for="nav-toggle"] {
      display: flex;

      > div {
        display: contents;
      }
    }

    #nav-toggle {
      display: none;
    }
  }
</style>

<style lang="scss">
  @import "../styles/variables.scss";
  $padding: 1rem;

  nav {
    position: sticky;
    top: 0;
    height: auto;
    max-height: calc(100dvh - (4 * #{$padding}));
    max-width: 100vw;

    flex: 0 0 200px;

    padding-inline: $padding;

    > div {
      padding: $padding;

      display: flex;
      flex-direction: column;
      gap: calc($padding * 1.5);

      a {
        display: block;

        color: $foreground;
        text-decoration: none;

        &:hover {
          color: lighten($foreground, 20%);
        }
      }

      header {
        a {
          display: flex;
          align-items: center;
        }
      }

      .page {
        &[data-active] {
          > a {
            background-color: darken($background, 1%);
            color: lighten($foreground, 20%);

            border-radius: 0.5rem 0.5rem 0 0;

            position: relative;
            left: -#{$padding};
            width: 100%;
            display: block;
            padding: #{$padding};
            margin-block: -#{calc($padding / 2)};

            &:not(:has(+ .subpages)) {
              border-radius: 0.5rem;
            }

            &:has(+ .subpages) {
              padding-bottom: calc(#{$padding} * 1.5);
            }
          }

          .subpages {
            background-color: lighten($background, 5%);
            padding: $padding;

            border-radius: 0 0 0.5rem 0.5rem;

            position: relative;
            left: -#{$padding};
            width: 100%;
            gap: $padding;
          }
        }

        .subpages {
          display: flex;
          flex-direction: column;
          gap: $padding;

          padding-top: $padding;

          a {
            padding-left: 2ch;
          }
        }
      }
    }
  }
</style>
